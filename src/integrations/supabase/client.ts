// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { logWithEmoji, logError } from '@/utils/consoleLogger';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || "https://bpolzfohirmqkmvubjzo.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJwb2x6Zm9oaXJtcWttdnVianpvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDczMTE2NTYsImV4cCI6MjA2Mjg4NzY1Nn0.VFWscgB-afT3Vm8QLST-IsQsfDMuMZcYyKE0S8y5s_Q";

// Try to detect if we're in a secure context
const isSecureContext = window.isSecureContext;
if (!isSecureContext) {
  logWithEmoji('Warning: Not running in a secure context. This may cause auth issues.', 'warning');
}

// Create a custom storage handler that falls back to memory if localStorage fails
const createStorageHandler = () => {
  const memoryStorage = new Map<string, string>();
  
  return {
    getItem: (key: string): string | null => {
      try {
        return localStorage.getItem(key);
      } catch (e) {
        logError(e, 'localStorage getItem failed, falling back to memory storage');
        return memoryStorage.get(key) || null;
      }
    },
    setItem: (key: string, value: string): void => {
      try {
        localStorage.setItem(key, value);
      } catch (e) {
        logError(e, 'localStorage setItem failed, falling back to memory storage');
        memoryStorage.set(key, value);
      }
    },
    removeItem: (key: string): void => {
      try {
        localStorage.removeItem(key);
      } catch (e) {
        logError(e, 'localStorage removeItem failed, falling back to memory storage');
        memoryStorage.delete(key);
      }
    }
  };
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      storage: createStorageHandler(),
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true,
      flowType: 'pkce'
    }
  }
);
